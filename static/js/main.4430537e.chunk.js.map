{"version":3,"sources":["api/todolists-api.ts","utils/error-utils.ts","features/auth-reducer.ts","app/app-reducer.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login.tsx","components/AddItemForm/AddItemForm.tsx","features/TodolistsList/todolists-reducer.ts","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","app/App.tsx","reportWebVitals.ts","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","authAPI","data","post","get","delete","todolistsAPI","title","id","put","todolistId","taskId","taskTitile","model","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","setIsInitializedAC","Alert","props","elevation","variant","ErrorSnackbar","useSelector","state","app","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","auth","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","then","res","resultCode","catch","resetForm","to","Grid","container","justify","item","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","TextField","label","margin","getFieldProps","touched","style","color","FormControlLabel","control","Checkbox","Button","AddItemForm","React","memo","console","log","useState","setTitle","setError","addItem","trim","onChange","e","currentTarget","onKeyPress","charCode","helperText","disabled","entityStatus","IconButton","onClick","AddBox","fetchTodosThunk","setState","todos","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","task","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Delete","Todolist","useEffect","action","tasks","setTasksAC","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","t","removeTodolist","map","paddingTop","TodolistsList","todolists","thunk","removeTaskAC","removeTaskTC","addTaskAC","createTaskTC","changeStatus","getState","find","startDate","priority","description","deadline","changeTaskStatusAC","updateTaskStatusTC","newTitle","changeTaskTitleAC","updateTaskTitleTC","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","todolist","addTodolistTC","padding","spacing","tl","allTodolistTasks","Paper","App","finally","AppBar","position","Toolbar","edge","Menu","Typography","right","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","stateCopy","forEach","newTasks","todoListId","todolistTasks","newTasksArray","copyState","store","createStore","applyMiddleware","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4430537e.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '369a3457-d3e2-4331-b490-319ddee29442'\r\n    }\r\n})\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\ntype UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\n\r\nexport type LoginParamsType={\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type AuthMeType={\r\n    id:number\r\n    email:string\r\n    login:string\r\n}\r\n\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post<ResponseType<{userId: number}>>('auth/login',data)\r\n        return promise\r\n    },\r\n    me(){\r\n        return instance.get<ResponseType<AuthMeType>>('auth/me')\r\n    },\r\n    logout(){\r\n        return instance.delete<ResponseType>('auth/login')\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(taskId: string, todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\n\r\n","\r\nimport { Dispatch } from 'redux';\r\nimport { ResponseType } from '../api/todolists-api';\r\nimport {setAppErrorAC, SetAppErrorType, setAppStatusAC, SetAppStatusType} from \"../app/app-reducer\";\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC(error.message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<SetAppErrorType | SetAppStatusType>","import {Dispatch} from 'redux'\r\nimport {authAPI, LoginParamsType} from \"../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\nimport {SetAppErrorType, setAppStatusAC, SetAppStatusType} from \"../app/app-reducer\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data:LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data,dispatch)\r\n            }\r\n        })\r\n        .catch((error:AxiosError)=>{\r\n            handleServerNetworkError(error,dispatch)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error:AxiosError) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusType | SetAppErrorType\r\n","import {setIsLoggedInAC} from \"../features/auth-reducer\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\n\r\ntype ActionsType = SetAppStatusType | SetAppErrorType|SetIsInitializedType\r\nexport type SetAppErrorType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusType = ReturnType<typeof setAppStatusAC>\r\nexport type SetIsInitializedType = ReturnType<typeof setIsInitializedAC>\r\n\r\nconst initialState = {\r\n    status: 'loading' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'SET-IS-INITIALIZED':\r\n            return {...state,isInitialized: action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => {\r\n    return {type: 'APP/SET-STATUS', status} as const\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => {\r\n    return {type: 'APP/SET-ERROR', error} as const\r\n}\r\n\r\nexport const setIsInitializedAC=(isInitialized: boolean)=>{\r\n    return { type: 'SET-IS-INITIALIZED',isInitialized} as const\r\n}\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then(res => {\r\n        debugger\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true));\r\n            dispatch(setIsInitializedAC(true))\r\n        } else {\r\n        }\r\n    })\r\n        .catch((error:AxiosError)=>{\r\n            handleServerNetworkError(error,dispatch)\r\n        })\r\n        .finally(()=>{\r\n            dispatch(setIsInitializedAC(true))\r\n        })\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>((state) => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n        //setOpen(false)\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType>((state) => state.auth.isLoggedIn)\r\n\r\n\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Invalid password';\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n\r\n        }\r\n    })\r\n\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email &&\r\n                        formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password &&\r\n                        formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password} </div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />}\r\n\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    entityStatus?:RequestStatusType\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   disabled={props.entityStatus === 'loading'}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem} disabled={props.entityStatus === 'loading'}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\n\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\n\r\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n    | SetTodosType\r\n    | ChangeTodoListEntityStatusType\r\n\r\nconst initialState: Array<TodolistDomainType> = [\r\n    /*{id: todolistId1, title: 'What to learn', filter: 'all', addedDate: '', order: 0},\r\n    {id: todolistId2, title: 'What to buy', filter: 'all', addedDate: '', order: 0}*/\r\n]\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case \"SET-TODOLISTS\":\r\n            return action.todos.map((tl) => {\r\n                return {...tl, filter: 'all', entityStatus: 'idle'}\r\n            })\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        case \"CHANGE-TODOLIST-ENTITY-STATUS\":\r\n            return state.map(tl => tl.id === action.id ?{...tl,entityStatus: action.entityStatus} :tl);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id: id, title: title}\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter}\r\n}\r\nexport const setTodosAc = (todos: Array<TodolistType>) => {\r\n    return {type: 'SET-TODOLISTS', todos} as const\r\n}\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => {\r\n    return {type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, entityStatus} as const\r\n}\r\n\r\n\r\nexport type ChangeTodoListEntityStatusType = ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nexport type SetTodosType = ReturnType<typeof setTodosAc>\r\n\r\n\r\nexport const fetchTodosThunk = (dispatch: Dispatch, setState: () => AppRootStateType): void => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTodolists().then((res) => {\r\n        dispatch(setTodosAc(res.data))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    })\r\n}\r\n\r\nexport const deleteTodoListTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC(todolistId,'loading'))\r\n    todolistsAPI.deleteTodolist(todolistId)\r\n        .then((res) => {\r\n            dispatch(removeTodolistAC(todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\n\r\n\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTodolistAC(res.data.data.item))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error:AxiosError)=>{\r\n                handleServerNetworkError(error,dispatch)\r\n            })\r\n    }\r\n}\r\n\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                if(res.data.resultCode === 0){\r\n                    dispatch(changeTodolistTitleAC(id, title))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                }else{\r\n                    handleServerAppError(res.data,dispatch)\r\n                }\r\n            })\r\n            .catch((error:AxiosError)=>{\r\n                handleServerNetworkError(error,dispatch)\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import {TasksStateType} from '../../app/App';\r\nimport {v1} from 'uuid';\r\nimport {AddTodolistActionType, RemoveTodolistActionType, setTodosAc, SetTodosType} from './todolists-reducer';\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI} from '../../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    task: TaskType,\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    todolistId: string\r\n    taskId: string\r\n    status: TaskStatuses\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    todolistId: string\r\n    taskId: string\r\n    title: string\r\n}\r\n\r\nexport type UpdateTaskModelType ={\r\n    title: string,\r\n    description: string,\r\n    completed: boolean,\r\n    status: string,\r\n    priority:string,\r\n    startDate: string,\r\n    deadline: string\r\n}\r\n\r\n\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodosType\r\n    | SetTasksActionType\r\n\r\nconst initialState: TasksStateType = {\r\n\r\n    /*\"todolistId1\": [\r\n        { id: \"1\", title: \"CSS\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"JS\", status: TaskStatuses.Completed, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"React\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ],\r\n    \"todolistId2\": [\r\n        { id: \"1\", title: \"bread\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"milk\", status: TaskStatuses.Completed, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"tea\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ]*/\r\n\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'SET-TASKS': {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolistId] = action.tasks;\r\n            return stateCopy\r\n        }\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todos.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter(t => t.id !== action.taskId);\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.task.todoListId];\r\n            const newTasks = [action.task, ...tasks];\r\n            stateCopy[action.task.todoListId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todolistTasks = state[action.todolistId];\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, status: action.status} : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId];\r\n            // найдём нужную таску:\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, title: action.title} : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolist.id]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId, todolistId}\r\n}\r\nexport const addTaskAC = (task: TaskType): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', task}\r\n}\r\n\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', status, todolistId, taskId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', title, todolistId, taskId}\r\n}\r\n\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => {\r\n    return {type: 'SET-TASKS', tasks, todolistId} as const\r\n}\r\n\r\nexport type SetTasksActionType = ReturnType<typeof setTasksAC>\r\n\r\n\r\nexport const fetchTasksTC =  (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTasks(todolistId)\r\n            .then((res) => {\r\n                const tasks = res.data.items\r\n                const action = setTasksAC(tasks, todolistId)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.deleteTask(taskId, todolistId)\r\n        .then(res => {\r\n                const action = removeTaskAC(taskId, todolistId)\r\n                dispatch(action)\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\n\r\nexport const createTaskTC = (todolistId: string, taskTitile: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, taskTitile)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data,dispatch)\r\n            }\r\n        })\r\n        .catch((error:AxiosError)=>{\r\n            handleServerNetworkError(error,dispatch)\r\n        })\r\n}\r\n\r\nexport const updateTaskStatusTC = (taskId: string, status: TaskStatuses, todolistId: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n\r\n// так как мы обязаны на сервер отправить все св-ва, которые сервер ожидает, а не только\r\n// те, которые мы хотим обновить, соответственно нам нужно в этом месте взять таску целиком  // чтобы у неё отобрать остальные св-ва\r\n\r\n        const allTasksFromState = getState().tasks;\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => {\r\n            return t.id === taskId\r\n        })\r\n\r\n        /*const model ={...task,status}*/\r\n        if (task) {\r\n            dispatch(setAppStatusAC('loading'))\r\n            todolistsAPI.updateTask(todolistId, taskId, {\r\n                title: task.title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: status\r\n            }).then((res) => {\r\n                if(res.data.resultCode === 0){\r\n                    const action = changeTaskStatusAC(taskId, status, todolistId)\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                }else{\r\n                    handleServerAppError(res.data,dispatch)\r\n                }\r\n            })\r\n                .catch((error:AxiosError)=>{\r\n                    handleServerNetworkError(error,dispatch)\r\n                })\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const updateTaskTitleTC=(taskId:string, title: string, todolistId: string)=>{\r\n    return (dispatch:Dispatch,getState: () => AppRootStateType)=>{\r\n        const allTasksFromState = getState().tasks;\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => {\r\n            return t.id === taskId\r\n        })\r\n\r\n        if (task){\r\n            dispatch(setAppStatusAC('loading'))\r\n            todolistsAPI.updateTask(todolistId, taskId, {\r\n                title: title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status:task.status\r\n            }).then((res) => {\r\n                if(res.data.resultCode === 0){\r\n                    const action = changeTaskTitleAC(taskId,title, todolistId)\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                }else{\r\n                    handleServerAppError(res.data,dispatch)\r\n                }\r\n            })\r\n                .catch((error:AxiosError)=>{\r\n                    handleServerNetworkError(error,dispatch)\r\n                })\r\n\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n/*export const updateTaskStatusTC=(taskId:string, status:TaskStatuses, todolistId:string)=>(dispatch: Dispatch, getState:()=>AppRootStateType)=>{\r\n    let state = getState()\r\n\r\n    const allTasks = state.tasks\r\n    const tasksForCurrentTodo = allTasks[todolistId];\r\n    debugger\r\n    let updatedTasks = tasksForCurrentTodo.find((task)=>{\r\n        return task.id === taskId\r\n    })\r\n\r\n    if(updatedTasks){\r\n        const model={\r\n            title: updatedTasks.title,\r\n            startDate: updatedTasks.startDate,\r\n            priority: updatedTasks.priority,\r\n            description: updatedTasks.description,\r\n            deadline: updatedTasks.deadline,\r\n            status: status\r\n        }\r\n\r\n        todolistsAPI.updateTask(taskId,todolistId,model)\r\n            .then((res) => {\r\n                const newTask = res.data.data.item\r\n                dispatch(changeTaskStatusAC(newTask.id,newTask.status,newTask.todoListId))\r\n            })\r\n    }\r\n\r\n\r\n}*/\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType} from '../todolists-reducer'\r\nimport {fetchTasksTC} from \"../tasks-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    entityStatus:RequestStatusType\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string,todolistId:string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n\r\n    },[])\r\n\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} entityStatus={props.entityStatus}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {Grid, Paper} from '@material-ui/core';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC, changeTodolistTitleTC, deleteTodoListTC,\r\n    fetchTodosThunk,\r\n    FilterValuesType,\r\n    TodolistDomainType\r\n} from \"./todolists-reducer\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport {TaskStatuses, TaskType} from \"../../api/todolists-api\";\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {createTaskTC, removeTaskTC, updateTaskStatusTC, updateTaskTitleTC} from \"./tasks-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType>((state) =>state.auth.isLoggedIn )\r\n\r\n    useEffect(() => {\r\n        if(!isLoggedIn){\r\n            return\r\n        }\r\n        dispatch(fetchTodosThunk)\r\n\r\n    }, [])\r\n\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId);\r\n        dispatch(thunk);\r\n    }, []);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        dispatch(createTaskTC(todolistId, title))\r\n    }, []);\r\n\r\n    const changeStatus = useCallback(function (taskId: string, status: TaskStatuses, todolistId: string,) {\r\n\r\n        dispatch(updateTaskStatusTC(taskId, status, todolistId))\r\n        /*const action = changeTaskStatusAC(id, status, todolistId);\r\n        dispatch(action);*/\r\n    }, []);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n\r\n        dispatch(updateTaskTitleTC(id, newTitle, todolistId))\r\n        /* const action = changeTaskTitleAC(id, newTitle, todolistId);\r\n        dispatch(action);*/\r\n    }, []);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n\r\n        dispatch(deleteTodoListTC(id))\r\n        /*const action = removeTodolistAC(id);\r\n        dispatch(action);*/\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n\r\n        dispatch(changeTodolistTitleTC(id, title))\r\n        /*  const action = changeTodolistTitleAC(id, title);\r\n          dispatch(action);*/\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string,) => {\r\n        dispatch(addTodolistTC(title))\r\n        /*const action = addTodolistAC(title);\r\n        dispatch(action);*/\r\n    }, [dispatch]);\r\n\r\n\r\n\r\n    if (!isLoggedIn){\r\n        return <Redirect to ={'/login'}/>\r\n    }\r\n\r\n    return (<>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={allTodolistTasks}\r\n                                        removeTask={removeTask}\r\n                                        entityStatus={tl.entityStatus}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n\r\n </>)\r\n}\r\n\r\nexport default TodolistsList;","import React, {useEffect} from 'react'\r\nimport './App.css';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './store';\r\nimport {TaskType} from '../api/todolists-api'\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {Login} from \"../features/Login\";\r\nimport TodolistsList from \"../features/TodolistsList/TodolistsList\";\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport {logoutTC} from \"../features/auth-reducer\";\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType>((state)=>state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType>((state)=>state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const logoutHandler =()=>{\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n\r\n    if(!isInitialized){\r\n        return <div\r\n            style = {{position:\"fixed\",top:\"30%\",textAlign:\"center\",width:\"100%\"}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            <ErrorSnackbar/>\r\n\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" style={{position:'absolute',right:'20px'}} onClick={logoutHandler}>Log out</Button>}\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'} render={() => <h1 style={{'textAlign': 'center'}}>404: PAGE NOT FOUND</h1>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/auth-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <BrowserRouter><App/></BrowserRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}