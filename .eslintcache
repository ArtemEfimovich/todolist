[{"C:\\ReactProject\\it-incubator\\src\\index.tsx":"1","C:\\ReactProject\\it-incubator\\src\\reportWebVitals.ts":"2","C:\\ReactProject\\it-incubator\\src\\api\\todolists-api.ts":"3","C:\\ReactProject\\it-incubator\\src\\utils\\error-utils.ts":"4","C:\\ReactProject\\it-incubator\\src\\features\\Login.tsx":"5","C:\\ReactProject\\it-incubator\\src\\app\\store.ts":"6","C:\\ReactProject\\it-incubator\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"7","C:\\ReactProject\\it-incubator\\src\\app\\App.tsx":"8","C:\\ReactProject\\it-incubator\\src\\app\\app-reducer.ts":"9","C:\\ReactProject\\it-incubator\\src\\features\\TodolistsList\\tasks-reducer.ts":"10","C:\\ReactProject\\it-incubator\\src\\features\\TodolistsList\\todolists-reducer.ts":"11","C:\\ReactProject\\it-incubator\\src\\features\\TodolistsList\\TodolistsList.tsx":"12","C:\\ReactProject\\it-incubator\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx":"13","C:\\ReactProject\\it-incubator\\src\\components\\AddItemForm\\AddItemForm.tsx":"14","C:\\ReactProject\\it-incubator\\src\\components\\EditableSpan\\EditableSpan.tsx":"15","C:\\ReactProject\\it-incubator\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"16","C:\\ReactProject\\it-incubator\\src\\features\\auth-reducer.ts":"17"},{"size":722,"mtime":1630338622849,"results":"18","hashOfConfig":"19"},{"size":425,"mtime":1607869388000,"results":"20","hashOfConfig":"19"},{"size":3096,"mtime":1630413415361,"results":"21","hashOfConfig":"19"},{"size":795,"mtime":1630334821146,"results":"22","hashOfConfig":"19"},{"size":3565,"mtime":1630408636069,"results":"23","hashOfConfig":"19"},{"size":1159,"mtime":1630359040339,"results":"24","hashOfConfig":"19"},{"size":1039,"mtime":1630334821196,"results":"25","hashOfConfig":"19"},{"size":2695,"mtime":1630414012339,"results":"26","hashOfConfig":"19"},{"size":2114,"mtime":1630412645908,"results":"27","hashOfConfig":"19"},{"size":11345,"mtime":1630335015751,"results":"28","hashOfConfig":"19"},{"size":5847,"mtime":1630335015651,"results":"29","hashOfConfig":"19"},{"size":4761,"mtime":1630409038749,"results":"30","hashOfConfig":"19"},{"size":3990,"mtime":1630335124672,"results":"31","hashOfConfig":"19"},{"size":1651,"mtime":1630334921683,"results":"32","hashOfConfig":"19"},{"size":952,"mtime":1594154724000,"results":"33","hashOfConfig":"19"},{"size":1773,"mtime":1630335124717,"results":"34","hashOfConfig":"19"},{"size":2005,"mtime":1630413309432,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"8x0je0",{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\ReactProject\\it-incubator\\src\\index.tsx",[],"C:\\ReactProject\\it-incubator\\src\\reportWebVitals.ts",[],["74","75"],"C:\\ReactProject\\it-incubator\\src\\api\\todolists-api.ts",[],"C:\\ReactProject\\it-incubator\\src\\utils\\error-utils.ts",[],"C:\\ReactProject\\it-incubator\\src\\features\\Login.tsx",["76"],"C:\\ReactProject\\it-incubator\\src\\app\\store.ts",[],"C:\\ReactProject\\it-incubator\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",[],"C:\\ReactProject\\it-incubator\\src\\app\\App.tsx",["77"],"C:\\ReactProject\\it-incubator\\src\\app\\app-reducer.ts",[],"C:\\ReactProject\\it-incubator\\src\\features\\TodolistsList\\tasks-reducer.ts",["78","79","80","81"],"import {TasksStateType} from '../../app/App';\r\nimport {v1} from 'uuid';\r\nimport {AddTodolistActionType, RemoveTodolistActionType, setTodosAc, SetTodosType} from './todolists-reducer';\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI} from '../../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    task: TaskType,\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    todolistId: string\r\n    taskId: string\r\n    status: TaskStatuses\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    todolistId: string\r\n    taskId: string\r\n    title: string\r\n}\r\n\r\nexport type UpdateTaskModelType ={\r\n    title: string,\r\n    description: string,\r\n    completed: boolean,\r\n    status: string,\r\n    priority:string,\r\n    startDate: string,\r\n    deadline: string\r\n}\r\n\r\n\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodosType\r\n    | SetTasksActionType\r\n\r\nconst initialState: TasksStateType = {\r\n\r\n    /*\"todolistId1\": [\r\n        { id: \"1\", title: \"CSS\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"JS\", status: TaskStatuses.Completed, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"React\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ],\r\n    \"todolistId2\": [\r\n        { id: \"1\", title: \"bread\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"milk\", status: TaskStatuses.Completed, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"tea\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ]*/\r\n\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'SET-TASKS': {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolistId] = action.tasks;\r\n            return stateCopy\r\n        }\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todos.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter(t => t.id !== action.taskId);\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.task.todoListId];\r\n            const newTasks = [action.task, ...tasks];\r\n            stateCopy[action.task.todoListId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todolistTasks = state[action.todolistId];\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, status: action.status} : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId];\r\n            // найдём нужную таску:\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, title: action.title} : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolist.id]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId, todolistId}\r\n}\r\nexport const addTaskAC = (task: TaskType): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', task}\r\n}\r\n\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', status, todolistId, taskId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', title, todolistId, taskId}\r\n}\r\n\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => {\r\n    return {type: 'SET-TASKS', tasks, todolistId} as const\r\n}\r\n\r\nexport type SetTasksActionType = ReturnType<typeof setTasksAC>\r\n\r\n\r\nexport const fetchTasksTC =  (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTasks(todolistId)\r\n            .then((res) => {\r\n                const tasks = res.data.items\r\n                const action = setTasksAC(tasks, todolistId)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.deleteTask(taskId, todolistId)\r\n        .then(res => {\r\n                const action = removeTaskAC(taskId, todolistId)\r\n                dispatch(action)\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\n\r\nexport const createTaskTC = (todolistId: string, taskTitile: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, taskTitile)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data,dispatch)\r\n            }\r\n        })\r\n        .catch((error:AxiosError)=>{\r\n            handleServerNetworkError(error,dispatch)\r\n        })\r\n}\r\n\r\nexport const updateTaskStatusTC = (taskId: string, status: TaskStatuses, todolistId: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n\r\n// так как мы обязаны на сервер отправить все св-ва, которые сервер ожидает, а не только\r\n// те, которые мы хотим обновить, соответственно нам нужно в этом месте взять таску целиком  // чтобы у неё отобрать остальные св-ва\r\n\r\n        const allTasksFromState = getState().tasks;\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => {\r\n            return t.id === taskId\r\n        })\r\n\r\n        /*const model ={...task,status}*/\r\n        if (task) {\r\n            dispatch(setAppStatusAC('loading'))\r\n            todolistsAPI.updateTask(todolistId, taskId, {\r\n                title: task.title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: status\r\n            }).then((res) => {\r\n                if(res.data.resultCode === 0){\r\n                    const action = changeTaskStatusAC(taskId, status, todolistId)\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                }else{\r\n                    handleServerAppError(res.data,dispatch)\r\n                }\r\n            })\r\n                .catch((error:AxiosError)=>{\r\n                    handleServerNetworkError(error,dispatch)\r\n                })\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const updateTaskTitleTC=(taskId:string, title: string, todolistId: string)=>{\r\n    return (dispatch:Dispatch,getState: () => AppRootStateType)=>{\r\n        const allTasksFromState = getState().tasks;\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => {\r\n            return t.id === taskId\r\n        })\r\n\r\n        if (task){\r\n            dispatch(setAppStatusAC('loading'))\r\n            todolistsAPI.updateTask(todolistId, taskId, {\r\n                title: title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status:task.status\r\n            }).then((res) => {\r\n                if(res.data.resultCode === 0){\r\n                    const action = changeTaskTitleAC(taskId,title, todolistId)\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                }else{\r\n                    handleServerAppError(res.data,dispatch)\r\n                }\r\n            })\r\n                .catch((error:AxiosError)=>{\r\n                    handleServerNetworkError(error,dispatch)\r\n                })\r\n\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n/*export const updateTaskStatusTC=(taskId:string, status:TaskStatuses, todolistId:string)=>(dispatch: Dispatch, getState:()=>AppRootStateType)=>{\r\n    let state = getState()\r\n\r\n    const allTasks = state.tasks\r\n    const tasksForCurrentTodo = allTasks[todolistId];\r\n    debugger\r\n    let updatedTasks = tasksForCurrentTodo.find((task)=>{\r\n        return task.id === taskId\r\n    })\r\n\r\n    if(updatedTasks){\r\n        const model={\r\n            title: updatedTasks.title,\r\n            startDate: updatedTasks.startDate,\r\n            priority: updatedTasks.priority,\r\n            description: updatedTasks.description,\r\n            deadline: updatedTasks.deadline,\r\n            status: status\r\n        }\r\n\r\n        todolistsAPI.updateTask(taskId,todolistId,model)\r\n            .then((res) => {\r\n                const newTask = res.data.data.item\r\n                dispatch(changeTaskStatusAC(newTask.id,newTask.status,newTask.todoListId))\r\n            })\r\n    }\r\n\r\n\r\n}*/\r\n","C:\\ReactProject\\it-incubator\\src\\features\\TodolistsList\\todolists-reducer.ts",[],"C:\\ReactProject\\it-incubator\\src\\features\\TodolistsList\\TodolistsList.tsx",["82","83","84","85","86","87","88","89","90"],"C:\\ReactProject\\it-incubator\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx",["91","92","93","94","95","96"],"import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType} from '../todolists-reducer'\r\nimport {fetchTasksTC} from \"../tasks-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    entityStatus:RequestStatusType\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string,todolistId:string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n\r\n    },[])\r\n\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} entityStatus={props.entityStatus}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","C:\\ReactProject\\it-incubator\\src\\components\\AddItemForm\\AddItemForm.tsx",[],"C:\\ReactProject\\it-incubator\\src\\components\\EditableSpan\\EditableSpan.tsx",[],"C:\\ReactProject\\it-incubator\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["97","98","99"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","C:\\ReactProject\\it-incubator\\src\\features\\auth-reducer.ts",[],{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":65,"column":29,"nodeType":"106","messageId":"107","endLine":66,"endColumn":50,"fix":"108"},{"ruleId":"109","severity":1,"message":"110","line":39,"column":8,"nodeType":"111","endLine":39,"endColumn":10,"suggestions":"112"},{"ruleId":"113","severity":1,"message":"114","line":2,"column":9,"nodeType":"115","messageId":"116","endLine":2,"endColumn":11},{"ruleId":"113","severity":1,"message":"117","line":3,"column":58,"nodeType":"115","messageId":"116","endLine":3,"endColumn":68},{"ruleId":"113","severity":1,"message":"118","line":4,"column":9,"nodeType":"115","messageId":"116","endLine":4,"endColumn":23},{"ruleId":"113","severity":1,"message":"119","line":7,"column":9,"nodeType":"115","messageId":"116","endLine":7,"endColumn":22},{"ruleId":"113","severity":1,"message":"120","line":14,"column":9,"nodeType":"115","messageId":"116","endLine":14,"endColumn":26},{"ruleId":"109","severity":1,"message":"121","line":37,"column":8,"nodeType":"111","endLine":37,"endColumn":10,"suggestions":"122"},{"ruleId":"109","severity":1,"message":"123","line":47,"column":8,"nodeType":"111","endLine":47,"endColumn":10,"suggestions":"124"},{"ruleId":"109","severity":1,"message":"123","line":51,"column":8,"nodeType":"111","endLine":51,"endColumn":10,"suggestions":"125"},{"ruleId":"109","severity":1,"message":"123","line":58,"column":8,"nodeType":"111","endLine":58,"endColumn":10,"suggestions":"126"},{"ruleId":"109","severity":1,"message":"123","line":65,"column":8,"nodeType":"111","endLine":65,"endColumn":10,"suggestions":"127"},{"ruleId":"109","severity":1,"message":"123","line":70,"column":8,"nodeType":"111","endLine":70,"endColumn":10,"suggestions":"128"},{"ruleId":"109","severity":1,"message":"123","line":77,"column":8,"nodeType":"111","endLine":77,"endColumn":10,"suggestions":"129"},{"ruleId":"109","severity":1,"message":"123","line":84,"column":8,"nodeType":"111","endLine":84,"endColumn":10,"suggestions":"130"},{"ruleId":"109","severity":1,"message":"131","line":37,"column":7,"nodeType":"111","endLine":37,"endColumn":9,"suggestions":"132"},{"ruleId":"109","severity":1,"message":"133","line":42,"column":8,"nodeType":"111","endLine":42,"endColumn":33,"suggestions":"134"},{"ruleId":"109","severity":1,"message":"133","line":49,"column":8,"nodeType":"111","endLine":49,"endColumn":45,"suggestions":"135"},{"ruleId":"109","severity":1,"message":"133","line":51,"column":86,"nodeType":"111","endLine":51,"endColumn":116,"suggestions":"136"},{"ruleId":"109","severity":1,"message":"133","line":52,"column":92,"nodeType":"111","endLine":52,"endColumn":122,"suggestions":"137"},{"ruleId":"109","severity":1,"message":"133","line":53,"column":98,"nodeType":"111","endLine":53,"endColumn":128,"suggestions":"138"},{"ruleId":"109","severity":1,"message":"133","line":15,"column":97,"nodeType":"111","endLine":15,"endColumn":130,"suggestions":"139"},{"ruleId":"109","severity":1,"message":"133","line":20,"column":8,"nodeType":"111","endLine":20,"endColumn":41,"suggestions":"140"},{"ruleId":"109","severity":1,"message":"133","line":24,"column":8,"nodeType":"111","endLine":24,"endColumn":41,"suggestions":"141"},"no-native-reassign",["142"],"no-negated-in-lhs",["143"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","noTargetBlank",{"range":"144","text":"145"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["146"],"@typescript-eslint/no-unused-vars","'v1' is defined but never used.","Identifier","unusedVar","'setTodosAc' is defined but never used.","'TaskPriorities' is defined but never used.","'setAppErrorAC' is defined but never used.","'RequestStatusType' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'isLoggedIn'. Either include them or remove the dependency array.",["147"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["148"],["149"],["150"],["151"],["152"],["153"],["154"],"React Hook useEffect has missing dependencies: 'dispatch' and 'props.id'. Either include them or remove the dependency array.",["155"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["156"],["157"],["158"],["159"],["160"],["161"],["162"],["163"],"no-global-assign","no-unsafe-negation",[1933,1933]," rel=\"noreferrer\"",{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},{"desc":"164","fix":"168"},{"desc":"164","fix":"169"},{"desc":"164","fix":"170"},{"desc":"164","fix":"171"},{"desc":"164","fix":"172"},{"desc":"164","fix":"173"},{"desc":"164","fix":"174"},{"desc":"175","fix":"176"},{"desc":"177","fix":"178"},{"desc":"177","fix":"179"},{"desc":"177","fix":"180"},{"desc":"177","fix":"181"},{"desc":"177","fix":"182"},{"desc":"177","fix":"183"},{"desc":"177","fix":"184"},{"desc":"177","fix":"185"},"Update the dependencies array to be: [dispatch]",{"range":"186","text":"187"},"Update the dependencies array to be: [dispatch, isLoggedIn]",{"range":"188","text":"189"},{"range":"190","text":"187"},{"range":"191","text":"187"},{"range":"192","text":"187"},{"range":"193","text":"187"},{"range":"194","text":"187"},{"range":"195","text":"187"},{"range":"196","text":"187"},"Update the dependencies array to be: [dispatch, props.id]",{"range":"197","text":"198"},"Update the dependencies array to be: [props]",{"range":"199","text":"200"},{"range":"201","text":"200"},{"range":"202","text":"200"},{"range":"203","text":"200"},{"range":"204","text":"200"},{"range":"205","text":"200"},{"range":"206","text":"200"},{"range":"207","text":"200"},[1263,1265],"[dispatch]",[1139,1141],"[dispatch, isLoggedIn]",[1546,1548],[1692,1694],[1983,1985],[2267,2269],[2471,2473],[2669,2671],[2915,2917],[1449,1451],"[dispatch, props.id]",[1559,1584],"[props]",[1797,1834],[1924,1954],[2048,2078],[2178,2208],[765,798],[1071,1104],[1261,1294]]