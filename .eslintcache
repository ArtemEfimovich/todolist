[{"C:\\ReactProject\\it-incubator\\src\\index.tsx":"1","C:\\ReactProject\\it-incubator\\src\\reportWebVitals.ts":"2","C:\\ReactProject\\it-incubator\\src\\state\\store.ts":"3","C:\\ReactProject\\it-incubator\\src\\App.tsx":"4","C:\\ReactProject\\it-incubator\\src\\state\\tasks-reducer.ts":"5","C:\\ReactProject\\it-incubator\\src\\state\\todolists-reducer.ts":"6","C:\\ReactProject\\it-incubator\\src\\AddItemForm.tsx":"7","C:\\ReactProject\\it-incubator\\src\\Todolist.tsx":"8","C:\\ReactProject\\it-incubator\\src\\api\\todolists-api.ts":"9","C:\\ReactProject\\it-incubator\\src\\EditableSpan.tsx":"10","C:\\ReactProject\\it-incubator\\src\\Task.tsx":"11"},{"size":641,"mtime":1611424226000,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":1607869388000,"results":"14","hashOfConfig":"13"},{"size":967,"mtime":1629128175141,"results":"15","hashOfConfig":"13"},{"size":4971,"mtime":1629919036444,"results":"16","hashOfConfig":"13"},{"size":9796,"mtime":1629887453301,"results":"17","hashOfConfig":"13"},{"size":4177,"mtime":1629919036457,"results":"18","hashOfConfig":"13"},{"size":1474,"mtime":1629886108017,"results":"19","hashOfConfig":"13"},{"size":3752,"mtime":1629650279226,"results":"20","hashOfConfig":"13"},{"size":2520,"mtime":1629651667959,"results":"21","hashOfConfig":"13"},{"size":952,"mtime":1594154724000,"results":"22","hashOfConfig":"13"},{"size":1729,"mtime":1596076630000,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"8x0je0",{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},"C:\\ReactProject\\it-incubator\\src\\index.tsx",[],["49","50"],"C:\\ReactProject\\it-incubator\\src\\reportWebVitals.ts",[],"C:\\ReactProject\\it-incubator\\src\\state\\store.ts",[],"C:\\ReactProject\\it-incubator\\src\\App.tsx",["51","52","53","54","55","56","57","58","59"],"C:\\ReactProject\\it-incubator\\src\\state\\tasks-reducer.ts",["60","61","62"],"C:\\ReactProject\\it-incubator\\src\\state\\todolists-reducer.ts",["63"],"C:\\ReactProject\\it-incubator\\src\\AddItemForm.tsx",["64","65","66"],"C:\\ReactProject\\it-incubator\\src\\Todolist.tsx",["67","68","69","70","71","72"],"import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from './AddItemForm'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task'\r\nimport {TaskStatuses, TaskType} from './api/todolists-api'\r\nimport {FilterValuesType} from './state/todolists-reducer'\r\nimport {fetchTasksTC} from \"./state/tasks-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string,todolistId:string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n\r\n    },[])\r\n\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","C:\\ReactProject\\it-incubator\\src\\api\\todolists-api.ts",[],"C:\\ReactProject\\it-incubator\\src\\EditableSpan.tsx",[],"C:\\ReactProject\\it-incubator\\src\\Task.tsx",["73","74","75"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from './api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n",{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":10,"column":5,"nodeType":"82","messageId":"83","endLine":10,"endColumn":26},{"ruleId":"84","severity":1,"message":"85","line":33,"column":7,"nodeType":"86","endLine":33,"endColumn":9,"suggestions":"87"},{"ruleId":"84","severity":1,"message":"88","line":45,"column":8,"nodeType":"86","endLine":45,"endColumn":10,"suggestions":"89"},{"ruleId":"84","severity":1,"message":"88","line":49,"column":8,"nodeType":"86","endLine":49,"endColumn":10,"suggestions":"90"},{"ruleId":"84","severity":1,"message":"88","line":56,"column":8,"nodeType":"86","endLine":56,"endColumn":10,"suggestions":"91"},{"ruleId":"84","severity":1,"message":"88","line":63,"column":8,"nodeType":"86","endLine":63,"endColumn":10,"suggestions":"92"},{"ruleId":"84","severity":1,"message":"88","line":68,"column":8,"nodeType":"86","endLine":68,"endColumn":10,"suggestions":"93"},{"ruleId":"84","severity":1,"message":"88","line":75,"column":8,"nodeType":"86","endLine":75,"endColumn":10,"suggestions":"94"},{"ruleId":"84","severity":1,"message":"88","line":82,"column":8,"nodeType":"86","endLine":82,"endColumn":10,"suggestions":"95"},{"ruleId":"80","severity":1,"message":"96","line":2,"column":9,"nodeType":"82","messageId":"83","endLine":2,"endColumn":11},{"ruleId":"80","severity":1,"message":"97","line":3,"column":58,"nodeType":"82","messageId":"83","endLine":3,"endColumn":68},{"ruleId":"80","severity":1,"message":"98","line":4,"column":9,"nodeType":"82","messageId":"83","endLine":4,"endColumn":23},{"ruleId":"80","severity":1,"message":"96","line":1,"column":9,"nodeType":"82","messageId":"83","endLine":1,"endColumn":11},{"ruleId":"80","severity":1,"message":"99","line":2,"column":9,"nodeType":"82","messageId":"83","endLine":2,"endColumn":12},{"ruleId":"80","severity":1,"message":"100","line":2,"column":14,"nodeType":"82","messageId":"83","endLine":2,"endColumn":20},{"ruleId":"80","severity":1,"message":"101","line":2,"column":22,"nodeType":"82","messageId":"83","endLine":2,"endColumn":33},{"ruleId":"84","severity":1,"message":"102","line":35,"column":7,"nodeType":"86","endLine":35,"endColumn":9,"suggestions":"103"},{"ruleId":"84","severity":1,"message":"104","line":40,"column":8,"nodeType":"86","endLine":40,"endColumn":33,"suggestions":"105"},{"ruleId":"84","severity":1,"message":"104","line":47,"column":8,"nodeType":"86","endLine":47,"endColumn":45,"suggestions":"106"},{"ruleId":"84","severity":1,"message":"104","line":49,"column":86,"nodeType":"86","endLine":49,"endColumn":116,"suggestions":"107"},{"ruleId":"84","severity":1,"message":"104","line":50,"column":92,"nodeType":"86","endLine":50,"endColumn":122,"suggestions":"108"},{"ruleId":"84","severity":1,"message":"104","line":51,"column":98,"nodeType":"86","endLine":51,"endColumn":128,"suggestions":"109"},{"ruleId":"84","severity":1,"message":"104","line":15,"column":97,"nodeType":"86","endLine":15,"endColumn":130,"suggestions":"110"},{"ruleId":"84","severity":1,"message":"104","line":20,"column":8,"nodeType":"86","endLine":20,"endColumn":41,"suggestions":"111"},{"ruleId":"84","severity":1,"message":"104","line":24,"column":8,"nodeType":"86","endLine":24,"endColumn":41,"suggestions":"112"},"no-native-reassign",["113"],"no-negated-in-lhs",["114"],"@typescript-eslint/no-unused-vars","'changeTodolistTitleAC' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["115"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["116"],["117"],["118"],["119"],["120"],["121"],["122"],"'v1' is defined but never used.","'setTodosAc' is defined but never used.","'TaskPriorities' is defined but never used.","'Box' is defined but never used.","'Button' is defined but never used.","'FormControl' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'props.id'. Either include them or remove the dependency array.",["123"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["124"],["125"],["126"],["127"],["128"],["129"],["130"],["131"],"no-global-assign","no-unsafe-negation",{"desc":"132","fix":"133"},{"desc":"132","fix":"134"},{"desc":"132","fix":"135"},{"desc":"132","fix":"136"},{"desc":"132","fix":"137"},{"desc":"132","fix":"138"},{"desc":"132","fix":"139"},{"desc":"132","fix":"140"},{"desc":"141","fix":"142"},{"desc":"143","fix":"144"},{"desc":"143","fix":"145"},{"desc":"143","fix":"146"},{"desc":"143","fix":"147"},{"desc":"143","fix":"148"},{"desc":"143","fix":"149"},{"desc":"143","fix":"150"},{"desc":"143","fix":"151"},"Update the dependencies array to be: [dispatch]",{"range":"152","text":"153"},{"range":"154","text":"153"},{"range":"155","text":"153"},{"range":"156","text":"153"},{"range":"157","text":"153"},{"range":"158","text":"153"},{"range":"159","text":"153"},{"range":"160","text":"153"},"Update the dependencies array to be: [dispatch, props.id]",{"range":"161","text":"162"},"Update the dependencies array to be: [props]",{"range":"163","text":"164"},{"range":"165","text":"164"},{"range":"166","text":"164"},{"range":"167","text":"164"},{"range":"168","text":"164"},{"range":"169","text":"164"},{"range":"170","text":"164"},{"range":"171","text":"164"},[979,981],"[dispatch]",[1389,1391],[1532,1534],[1823,1825],[2105,2107],[2309,2311],[2507,2509],[2745,2747],[1289,1291],"[dispatch, props.id]",[1399,1424],"[props]",[1637,1674],[1764,1794],[1888,1918],[2018,2048],[721,754],[1027,1060],[1217,1250]]