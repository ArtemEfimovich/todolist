[{"C:\\ReactProject\\it-incubator\\src\\index.tsx":"1","C:\\ReactProject\\it-incubator\\src\\reportWebVitals.ts":"2","C:\\ReactProject\\it-incubator\\src\\state\\store.ts":"3","C:\\ReactProject\\it-incubator\\src\\App.tsx":"4","C:\\ReactProject\\it-incubator\\src\\state\\tasks-reducer.ts":"5","C:\\ReactProject\\it-incubator\\src\\state\\todolists-reducer.ts":"6","C:\\ReactProject\\it-incubator\\src\\AddItemForm.tsx":"7","C:\\ReactProject\\it-incubator\\src\\Todolist.tsx":"8","C:\\ReactProject\\it-incubator\\src\\api\\todolists-api.ts":"9","C:\\ReactProject\\it-incubator\\src\\EditableSpan.tsx":"10","C:\\ReactProject\\it-incubator\\src\\Task.tsx":"11"},{"size":641,"mtime":1611424226000,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":1607869388000,"results":"14","hashOfConfig":"13"},{"size":967,"mtime":1629128175141,"results":"15","hashOfConfig":"13"},{"size":4848,"mtime":1629651998379,"results":"16","hashOfConfig":"13"},{"size":8869,"mtime":1629711985840,"results":"17","hashOfConfig":"13"},{"size":3669,"mtime":1629129990762,"results":"18","hashOfConfig":"13"},{"size":1474,"mtime":1594727720000,"results":"19","hashOfConfig":"13"},{"size":3752,"mtime":1629650279226,"results":"20","hashOfConfig":"13"},{"size":2520,"mtime":1629651667959,"results":"21","hashOfConfig":"13"},{"size":952,"mtime":1594154724000,"results":"22","hashOfConfig":"13"},{"size":1729,"mtime":1596076630000,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"8x0je0",{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"26"},"C:\\ReactProject\\it-incubator\\src\\index.tsx",[],["51","52"],"C:\\ReactProject\\it-incubator\\src\\reportWebVitals.ts",[],"C:\\ReactProject\\it-incubator\\src\\state\\store.ts",[],"C:\\ReactProject\\it-incubator\\src\\App.tsx",["53","54","55","56","57","58","59","60","61","62","63","64","65","66"],"import React, {useCallback, useEffect} from 'react'\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC, fetchTodosThunk,\r\n    FilterValuesType,\r\n    removeTodolistAC, setTodosAc,\r\n    TodolistDomainType\r\n} from './state/todolists-reducer'\r\nimport {\r\n    addTaskAC,\r\n    changeTaskStatusAC,\r\n    changeTaskTitleAC, createTaskTC,\r\n    fetchTasksTC,\r\n    removeTaskAC,\r\n    removeTaskTC, updateTaskStatusTC\r\n} from './state/tasks-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\nimport {TaskStatuses, TaskType, todolistsAPI} from './api/todolists-api'\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n\r\n    useEffect(()=>{\r\n        dispatch(fetchTodosThunk)\r\n\r\n    },[])\r\n\r\n\r\n\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    const removeTask = useCallback(function ( id: string,todolistId: string) {\r\n        const thunk = removeTaskTC(id,todolistId);\r\n        dispatch(thunk);\r\n    }, []);\r\n\r\n    const addTask = useCallback(function (title: string,todolistId:string) {\r\n        dispatch(createTaskTC(todolistId,title))\r\n    }, []);\r\n\r\n    const changeStatus = useCallback(function (taskId: string, status: TaskStatuses, todolistId: string) {\r\n\r\n        dispatch(updateTaskStatusTC(taskId, status, todolistId))\r\n        /*const action = changeTaskStatusAC(id, status, todolistId);\r\n        dispatch(action);*/\r\n    }, []);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const action = changeTaskTitleAC(id, newTitle, todolistId);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const action = removeTodolistAC(id);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const action = changeTodolistTitleAC(id, title);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const action = addTodolistAC(title);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={allTodolistTasks}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","C:\\ReactProject\\it-incubator\\src\\state\\tasks-reducer.ts",["67","68","69"],"C:\\ReactProject\\it-incubator\\src\\state\\todolists-reducer.ts",[],"C:\\ReactProject\\it-incubator\\src\\AddItemForm.tsx",["70","71","72"],"import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","C:\\ReactProject\\it-incubator\\src\\Todolist.tsx",["73","74","75","76","77","78"],"import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from './AddItemForm'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task'\r\nimport {TaskStatuses, TaskType} from './api/todolists-api'\r\nimport {FilterValuesType} from './state/todolists-reducer'\r\nimport {fetchTasksTC} from \"./state/tasks-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string,todolistId:string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n\r\n    },[])\r\n\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","C:\\ReactProject\\it-incubator\\src\\api\\todolists-api.ts",[],"C:\\ReactProject\\it-incubator\\src\\EditableSpan.tsx",[],"C:\\ReactProject\\it-incubator\\src\\Task.tsx",["79","80","81"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from './api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n",{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":12,"column":23,"nodeType":"88","messageId":"89","endLine":12,"endColumn":33},{"ruleId":"86","severity":1,"message":"90","line":16,"column":5,"nodeType":"88","messageId":"89","endLine":16,"endColumn":14},{"ruleId":"86","severity":1,"message":"91","line":17,"column":5,"nodeType":"88","messageId":"89","endLine":17,"endColumn":23},{"ruleId":"86","severity":1,"message":"92","line":19,"column":5,"nodeType":"88","messageId":"89","endLine":19,"endColumn":17},{"ruleId":"86","severity":1,"message":"93","line":20,"column":5,"nodeType":"88","messageId":"89","endLine":20,"endColumn":17},{"ruleId":"86","severity":1,"message":"94","line":25,"column":33,"nodeType":"88","messageId":"89","endLine":25,"endColumn":45},{"ruleId":"95","severity":1,"message":"96","line":39,"column":7,"nodeType":"97","endLine":39,"endColumn":9,"suggestions":"98"},{"ruleId":"95","severity":1,"message":"99","line":51,"column":8,"nodeType":"97","endLine":51,"endColumn":10,"suggestions":"100"},{"ruleId":"95","severity":1,"message":"99","line":55,"column":8,"nodeType":"97","endLine":55,"endColumn":10,"suggestions":"101"},{"ruleId":"95","severity":1,"message":"99","line":62,"column":8,"nodeType":"97","endLine":62,"endColumn":10,"suggestions":"102"},{"ruleId":"95","severity":1,"message":"99","line":67,"column":8,"nodeType":"97","endLine":67,"endColumn":10,"suggestions":"103"},{"ruleId":"95","severity":1,"message":"99","line":72,"column":8,"nodeType":"97","endLine":72,"endColumn":10,"suggestions":"104"},{"ruleId":"95","severity":1,"message":"99","line":77,"column":8,"nodeType":"97","endLine":77,"endColumn":10,"suggestions":"105"},{"ruleId":"95","severity":1,"message":"99","line":82,"column":8,"nodeType":"97","endLine":82,"endColumn":10,"suggestions":"106"},{"ruleId":"86","severity":1,"message":"107","line":2,"column":9,"nodeType":"88","messageId":"89","endLine":2,"endColumn":11},{"ruleId":"86","severity":1,"message":"87","line":3,"column":58,"nodeType":"88","messageId":"89","endLine":3,"endColumn":68},{"ruleId":"86","severity":1,"message":"108","line":4,"column":9,"nodeType":"88","messageId":"89","endLine":4,"endColumn":23},{"ruleId":"86","severity":1,"message":"109","line":2,"column":9,"nodeType":"88","messageId":"89","endLine":2,"endColumn":12},{"ruleId":"86","severity":1,"message":"110","line":2,"column":14,"nodeType":"88","messageId":"89","endLine":2,"endColumn":20},{"ruleId":"86","severity":1,"message":"111","line":2,"column":22,"nodeType":"88","messageId":"89","endLine":2,"endColumn":33},{"ruleId":"95","severity":1,"message":"112","line":35,"column":7,"nodeType":"97","endLine":35,"endColumn":9,"suggestions":"113"},{"ruleId":"95","severity":1,"message":"114","line":40,"column":8,"nodeType":"97","endLine":40,"endColumn":33,"suggestions":"115"},{"ruleId":"95","severity":1,"message":"114","line":47,"column":8,"nodeType":"97","endLine":47,"endColumn":45,"suggestions":"116"},{"ruleId":"95","severity":1,"message":"114","line":49,"column":86,"nodeType":"97","endLine":49,"endColumn":116,"suggestions":"117"},{"ruleId":"95","severity":1,"message":"114","line":50,"column":92,"nodeType":"97","endLine":50,"endColumn":122,"suggestions":"118"},{"ruleId":"95","severity":1,"message":"114","line":51,"column":98,"nodeType":"97","endLine":51,"endColumn":128,"suggestions":"119"},{"ruleId":"95","severity":1,"message":"114","line":15,"column":97,"nodeType":"97","endLine":15,"endColumn":130,"suggestions":"120"},{"ruleId":"95","severity":1,"message":"114","line":20,"column":8,"nodeType":"97","endLine":20,"endColumn":41,"suggestions":"121"},{"ruleId":"95","severity":1,"message":"114","line":24,"column":8,"nodeType":"97","endLine":24,"endColumn":41,"suggestions":"122"},"no-native-reassign",["123"],"no-negated-in-lhs",["124"],"@typescript-eslint/no-unused-vars","'setTodosAc' is defined but never used.","Identifier","unusedVar","'addTaskAC' is defined but never used.","'changeTaskStatusAC' is defined but never used.","'fetchTasksTC' is defined but never used.","'removeTaskAC' is defined but never used.","'todolistsAPI' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["125"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["126"],["127"],["128"],["129"],["130"],["131"],["132"],"'v1' is defined but never used.","'TaskPriorities' is defined but never used.","'Box' is defined but never used.","'Button' is defined but never used.","'FormControl' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'props.id'. Either include them or remove the dependency array.",["133"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["134"],["135"],["136"],["137"],["138"],["139"],["140"],["141"],"no-global-assign","no-unsafe-negation",{"desc":"142","fix":"143"},{"desc":"142","fix":"144"},{"desc":"142","fix":"145"},{"desc":"142","fix":"146"},{"desc":"142","fix":"147"},{"desc":"142","fix":"148"},{"desc":"142","fix":"149"},{"desc":"142","fix":"150"},{"desc":"151","fix":"152"},{"desc":"153","fix":"154"},{"desc":"153","fix":"155"},{"desc":"153","fix":"156"},{"desc":"153","fix":"157"},{"desc":"153","fix":"158"},{"desc":"153","fix":"159"},{"desc":"153","fix":"160"},{"desc":"153","fix":"161"},"Update the dependencies array to be: [dispatch]",{"range":"162","text":"163"},{"range":"164","text":"163"},{"range":"165","text":"163"},{"range":"166","text":"163"},{"range":"167","text":"163"},{"range":"168","text":"163"},{"range":"169","text":"163"},{"range":"170","text":"163"},"Update the dependencies array to be: [dispatch, props.id]",{"range":"171","text":"172"},"Update the dependencies array to be: [props]",{"range":"173","text":"174"},{"range":"175","text":"174"},{"range":"176","text":"174"},{"range":"177","text":"174"},{"range":"178","text":"174"},{"range":"179","text":"174"},{"range":"180","text":"174"},{"range":"181","text":"174"},[1069,1071],"[dispatch]",[1479,1481],[1622,1624],[1912,1914],[2126,2128],[2330,2332],[2482,2484],[2666,2668],[1289,1291],"[dispatch, props.id]",[1399,1424],"[props]",[1637,1674],[1764,1794],[1888,1918],[2018,2048],[721,754],[1027,1060],[1217,1250]]