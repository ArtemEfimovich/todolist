[{"C:\\ReactProject\\it-incubator\\src\\index.tsx":"1","C:\\ReactProject\\it-incubator\\src\\reportWebVitals.ts":"2","C:\\ReactProject\\it-incubator\\src\\api\\todolists-api.ts":"3","C:\\ReactProject\\it-incubator\\src\\utils\\error-utils.ts":"4","C:\\ReactProject\\it-incubator\\src\\features\\Login.tsx":"5","C:\\ReactProject\\it-incubator\\src\\app\\store.ts":"6","C:\\ReactProject\\it-incubator\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"7","C:\\ReactProject\\it-incubator\\src\\app\\App.tsx":"8","C:\\ReactProject\\it-incubator\\src\\app\\app-reducer.ts":"9","C:\\ReactProject\\it-incubator\\src\\features\\TodolistsList\\tasks-reducer.ts":"10","C:\\ReactProject\\it-incubator\\src\\features\\TodolistsList\\todolists-reducer.ts":"11","C:\\ReactProject\\it-incubator\\src\\features\\TodolistsList\\TodolistsList.tsx":"12","C:\\ReactProject\\it-incubator\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx":"13","C:\\ReactProject\\it-incubator\\src\\components\\AddItemForm\\AddItemForm.tsx":"14","C:\\ReactProject\\it-incubator\\src\\components\\EditableSpan\\EditableSpan.tsx":"15","C:\\ReactProject\\it-incubator\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"16","C:\\ReactProject\\it-incubator\\src\\features\\auth-reducer.ts":"17"},{"size":758,"mtime":1635278039277,"results":"18","hashOfConfig":"19"},{"size":425,"mtime":1607869388000,"results":"20","hashOfConfig":"19"},{"size":3096,"mtime":1630413415361,"results":"21","hashOfConfig":"19"},{"size":795,"mtime":1630334821146,"results":"22","hashOfConfig":"19"},{"size":3565,"mtime":1630408636069,"results":"23","hashOfConfig":"19"},{"size":1159,"mtime":1630359040339,"results":"24","hashOfConfig":"19"},{"size":1039,"mtime":1630334821196,"results":"25","hashOfConfig":"19"},{"size":2695,"mtime":1630414012339,"results":"26","hashOfConfig":"19"},{"size":2114,"mtime":1635277533725,"results":"27","hashOfConfig":"19"},{"size":11345,"mtime":1635277572200,"results":"28","hashOfConfig":"19"},{"size":5847,"mtime":1630335015651,"results":"29","hashOfConfig":"19"},{"size":4761,"mtime":1630409038749,"results":"30","hashOfConfig":"19"},{"size":3990,"mtime":1630335124672,"results":"31","hashOfConfig":"19"},{"size":1651,"mtime":1630334921683,"results":"32","hashOfConfig":"19"},{"size":952,"mtime":1594154724000,"results":"33","hashOfConfig":"19"},{"size":1773,"mtime":1630335124717,"results":"34","hashOfConfig":"19"},{"size":2005,"mtime":1630413309432,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},"8x0je0",{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"48","usedDeprecatedRules":"41"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"41"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"41"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"41"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"41"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"C:\\ReactProject\\it-incubator\\src\\index.tsx",["78"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n               <App/>\n            </Provider>\n        </HashRouter>\n\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","C:\\ReactProject\\it-incubator\\src\\reportWebVitals.ts",[],["79","80"],"C:\\ReactProject\\it-incubator\\src\\api\\todolists-api.ts",[],"C:\\ReactProject\\it-incubator\\src\\utils\\error-utils.ts",[],"C:\\ReactProject\\it-incubator\\src\\features\\Login.tsx",["81"],"import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType>((state) => state.auth.isLoggedIn)\r\n\r\n\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Invalid password';\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n\r\n        }\r\n    })\r\n\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email &&\r\n                        formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password &&\r\n                        formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password} </div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />}\r\n\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","C:\\ReactProject\\it-incubator\\src\\app\\store.ts",[],"C:\\ReactProject\\it-incubator\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",[],"C:\\ReactProject\\it-incubator\\src\\app\\App.tsx",["82"],"import React, {useEffect} from 'react'\r\nimport './App.css';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './store';\r\nimport {TaskType} from '../api/todolists-api'\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {Login} from \"../features/Login\";\r\nimport TodolistsList from \"../features/TodolistsList/TodolistsList\";\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport {logoutTC} from \"../features/auth-reducer\";\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType>((state)=>state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType>((state)=>state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const logoutHandler =()=>{\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n\r\n    if(!isInitialized){\r\n        return <div\r\n            style = {{position:\"fixed\",top:\"30%\",textAlign:\"center\",width:\"100%\"}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            <ErrorSnackbar/>\r\n\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" style={{position:'absolute',right:'20px'}} onClick={logoutHandler}>Log out</Button>}\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'} render={() => <h1 style={{'textAlign': 'center'}}>404: PAGE NOT FOUND</h1>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","C:\\ReactProject\\it-incubator\\src\\app\\app-reducer.ts",[],"C:\\ReactProject\\it-incubator\\src\\features\\TodolistsList\\tasks-reducer.ts",["83","84","85","86"],"import {TasksStateType} from '../../app/App';\r\nimport {v1} from 'uuid';\r\nimport {AddTodolistActionType, RemoveTodolistActionType, setTodosAc, SetTodosType} from './todolists-reducer';\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI} from '../../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    task: TaskType,\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    todolistId: string\r\n    taskId: string\r\n    status: TaskStatuses\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    todolistId: string\r\n    taskId: string\r\n    title: string\r\n}\r\n\r\nexport type UpdateTaskModelType ={\r\n    title: string,\r\n    description: string,\r\n    completed: boolean,\r\n    status: string,\r\n    priority:string,\r\n    startDate: string,\r\n    deadline: string\r\n}\r\n\r\n\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodosType\r\n    | SetTasksActionType\r\n\r\nconst initialState: TasksStateType = {\r\n\r\n    /*\"todolistId1\": [\r\n        { id: \"1\", title: \"CSS\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"JS\", status: TaskStatuses.Completed, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"React\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ],\r\n    \"todolistId2\": [\r\n        { id: \"1\", title: \"bread\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"milk\", status: TaskStatuses.Completed, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"tea\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ]*/\r\n\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'SET-TASKS': {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolistId] = action.tasks;\r\n            return stateCopy\r\n        }\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todos.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter(t => t.id !== action.taskId);\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.task.todoListId];\r\n            const newTasks = [action.task, ...tasks];\r\n            stateCopy[action.task.todoListId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todolistTasks = state[action.todolistId];\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, status: action.status} : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId];\r\n            // найдём нужную таску:\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, title: action.title} : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolist.id]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId, todolistId}\r\n}\r\nexport const addTaskAC = (task: TaskType): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', task}\r\n}\r\n\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', status, todolistId, taskId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', title, todolistId, taskId}\r\n}\r\n\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => {\r\n    return {type: 'SET-TASKS', tasks, todolistId} as const\r\n}\r\n\r\nexport type SetTasksActionType = ReturnType<typeof setTasksAC>\r\n\r\n\r\nexport const fetchTasksTC =  (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTasks(todolistId)\r\n            .then((res) => {\r\n                const tasks = res.data.items\r\n                const action = setTasksAC(tasks, todolistId)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.deleteTask(taskId, todolistId)\r\n        .then(res => {\r\n                const action = removeTaskAC(taskId, todolistId)\r\n                dispatch(action)\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\n\r\nexport const createTaskTC = (todolistId: string, taskTitile: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, taskTitile)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data,dispatch)\r\n            }\r\n        })\r\n        .catch((error:AxiosError)=>{\r\n            handleServerNetworkError(error,dispatch)\r\n        })\r\n}\r\n\r\nexport const updateTaskStatusTC = (taskId: string, status: TaskStatuses, todolistId: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n\r\n// так как мы обязаны на сервер отправить все св-ва, которые сервер ожидает, а не только\r\n// те, которые мы хотим обновить, соответственно нам нужно в этом месте взять таску целиком  // чтобы у неё отобрать остальные св-ва\r\n\r\n        const allTasksFromState = getState().tasks;\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => {\r\n            return t.id === taskId\r\n        })\r\n\r\n        /*const model ={...task,status}*/\r\n        if (task) {\r\n            dispatch(setAppStatusAC('loading'))\r\n            todolistsAPI.updateTask(todolistId, taskId, {\r\n                title: task.title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: status\r\n            }).then((res) => {\r\n                if(res.data.resultCode === 0){\r\n                    const action = changeTaskStatusAC(taskId, status, todolistId)\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                }else{\r\n                    handleServerAppError(res.data,dispatch)\r\n                }\r\n            })\r\n                .catch((error:AxiosError)=>{\r\n                    handleServerNetworkError(error,dispatch)\r\n                })\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const updateTaskTitleTC=(taskId:string, title: string, todolistId: string)=>{\r\n    return (dispatch:Dispatch,getState: () => AppRootStateType)=>{\r\n        const allTasksFromState = getState().tasks;\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => {\r\n            return t.id === taskId\r\n        })\r\n\r\n        if (task){\r\n            dispatch(setAppStatusAC('loading'))\r\n            todolistsAPI.updateTask(todolistId, taskId, {\r\n                title: title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status:task.status\r\n            }).then((res) => {\r\n                if(res.data.resultCode === 0){\r\n                    const action = changeTaskTitleAC(taskId,title, todolistId)\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                }else{\r\n                    handleServerAppError(res.data,dispatch)\r\n                }\r\n            })\r\n                .catch((error:AxiosError)=>{\r\n                    handleServerNetworkError(error,dispatch)\r\n                })\r\n\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n/*export const updateTaskStatusTC=(taskId:string, status:TaskStatuses, todolistId:string)=>(dispatch: Dispatch, getState:()=>AppRootStateType)=>{\r\n    let state = getState()\r\n\r\n    const allTasks = state.tasks\r\n    const tasksForCurrentTodo = allTasks[todolistId];\r\n    debugger\r\n    let updatedTasks = tasksForCurrentTodo.find((task)=>{\r\n        return task.id === taskId\r\n    })\r\n\r\n    if(updatedTasks){\r\n        const model={\r\n            title: updatedTasks.title,\r\n            startDate: updatedTasks.startDate,\r\n            priority: updatedTasks.priority,\r\n            description: updatedTasks.description,\r\n            deadline: updatedTasks.deadline,\r\n            status: status\r\n        }\r\n\r\n        todolistsAPI.updateTask(taskId,todolistId,model)\r\n            .then((res) => {\r\n                const newTask = res.data.data.item\r\n                dispatch(changeTaskStatusAC(newTask.id,newTask.status,newTask.todoListId))\r\n            })\r\n    }\r\n\r\n\r\n}*/\r\n","C:\\ReactProject\\it-incubator\\src\\features\\TodolistsList\\todolists-reducer.ts",[],"C:\\ReactProject\\it-incubator\\src\\features\\TodolistsList\\TodolistsList.tsx",["87","88","89","90","91","92","93","94","95"],"import React, {useCallback, useEffect} from 'react'\r\nimport {Grid, Paper} from '@material-ui/core';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC, changeTodolistTitleTC, deleteTodoListTC,\r\n    fetchTodosThunk,\r\n    FilterValuesType,\r\n    TodolistDomainType\r\n} from \"./todolists-reducer\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport {TaskStatuses, TaskType} from \"../../api/todolists-api\";\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {createTaskTC, removeTaskTC, updateTaskStatusTC, updateTaskTitleTC} from \"./tasks-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType>((state) =>state.auth.isLoggedIn )\r\n\r\n    useEffect(() => {\r\n        if(!isLoggedIn){\r\n            return\r\n        }\r\n        dispatch(fetchTodosThunk)\r\n\r\n    }, [])\r\n\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId);\r\n        dispatch(thunk);\r\n    }, []);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        dispatch(createTaskTC(todolistId, title))\r\n    }, []);\r\n\r\n    const changeStatus = useCallback(function (taskId: string, status: TaskStatuses, todolistId: string,) {\r\n\r\n        dispatch(updateTaskStatusTC(taskId, status, todolistId))\r\n        /*const action = changeTaskStatusAC(id, status, todolistId);\r\n        dispatch(action);*/\r\n    }, []);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n\r\n        dispatch(updateTaskTitleTC(id, newTitle, todolistId))\r\n        /* const action = changeTaskTitleAC(id, newTitle, todolistId);\r\n        dispatch(action);*/\r\n    }, []);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n\r\n        dispatch(deleteTodoListTC(id))\r\n        /*const action = removeTodolistAC(id);\r\n        dispatch(action);*/\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n\r\n        dispatch(changeTodolistTitleTC(id, title))\r\n        /*  const action = changeTodolistTitleAC(id, title);\r\n          dispatch(action);*/\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string,) => {\r\n        dispatch(addTodolistTC(title))\r\n        /*const action = addTodolistAC(title);\r\n        dispatch(action);*/\r\n    }, [dispatch]);\r\n\r\n\r\n\r\n    if (!isLoggedIn){\r\n        return <Redirect to ={'/login'}/>\r\n    }\r\n\r\n    return (<>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={allTodolistTasks}\r\n                                        removeTask={removeTask}\r\n                                        entityStatus={tl.entityStatus}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n\r\n </>)\r\n}\r\n\r\nexport default TodolistsList;","C:\\ReactProject\\it-incubator\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx",["96","97","98","99","100","101"],"import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType} from '../todolists-reducer'\r\nimport {fetchTasksTC} from \"../tasks-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    entityStatus:RequestStatusType\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string,todolistId:string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n\r\n    },[])\r\n\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} entityStatus={props.entityStatus}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","C:\\ReactProject\\it-incubator\\src\\components\\AddItemForm\\AddItemForm.tsx",[],"C:\\ReactProject\\it-incubator\\src\\components\\EditableSpan\\EditableSpan.tsx",[],"C:\\ReactProject\\it-incubator\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["102","103","104"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","C:\\ReactProject\\it-incubator\\src\\features\\auth-reducer.ts",[],{"ruleId":"105","severity":1,"message":"106","line":8,"column":9,"nodeType":"107","messageId":"108","endLine":8,"endColumn":22},{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":65,"column":29,"nodeType":"115","messageId":"116","endLine":66,"endColumn":50,"fix":"117"},{"ruleId":"118","severity":1,"message":"119","line":39,"column":8,"nodeType":"120","endLine":39,"endColumn":10,"suggestions":"121"},{"ruleId":"105","severity":1,"message":"122","line":2,"column":9,"nodeType":"107","messageId":"108","endLine":2,"endColumn":11},{"ruleId":"105","severity":1,"message":"123","line":3,"column":58,"nodeType":"107","messageId":"108","endLine":3,"endColumn":68},{"ruleId":"105","severity":1,"message":"124","line":4,"column":9,"nodeType":"107","messageId":"108","endLine":4,"endColumn":23},{"ruleId":"105","severity":1,"message":"125","line":7,"column":9,"nodeType":"107","messageId":"108","endLine":7,"endColumn":22},{"ruleId":"105","severity":1,"message":"126","line":14,"column":9,"nodeType":"107","messageId":"108","endLine":14,"endColumn":26},{"ruleId":"118","severity":1,"message":"127","line":37,"column":8,"nodeType":"120","endLine":37,"endColumn":10,"suggestions":"128"},{"ruleId":"118","severity":1,"message":"129","line":47,"column":8,"nodeType":"120","endLine":47,"endColumn":10,"suggestions":"130"},{"ruleId":"118","severity":1,"message":"129","line":51,"column":8,"nodeType":"120","endLine":51,"endColumn":10,"suggestions":"131"},{"ruleId":"118","severity":1,"message":"129","line":58,"column":8,"nodeType":"120","endLine":58,"endColumn":10,"suggestions":"132"},{"ruleId":"118","severity":1,"message":"129","line":65,"column":8,"nodeType":"120","endLine":65,"endColumn":10,"suggestions":"133"},{"ruleId":"118","severity":1,"message":"129","line":70,"column":8,"nodeType":"120","endLine":70,"endColumn":10,"suggestions":"134"},{"ruleId":"118","severity":1,"message":"129","line":77,"column":8,"nodeType":"120","endLine":77,"endColumn":10,"suggestions":"135"},{"ruleId":"118","severity":1,"message":"129","line":84,"column":8,"nodeType":"120","endLine":84,"endColumn":10,"suggestions":"136"},{"ruleId":"118","severity":1,"message":"137","line":37,"column":7,"nodeType":"120","endLine":37,"endColumn":9,"suggestions":"138"},{"ruleId":"118","severity":1,"message":"139","line":42,"column":8,"nodeType":"120","endLine":42,"endColumn":33,"suggestions":"140"},{"ruleId":"118","severity":1,"message":"139","line":49,"column":8,"nodeType":"120","endLine":49,"endColumn":45,"suggestions":"141"},{"ruleId":"118","severity":1,"message":"139","line":51,"column":86,"nodeType":"120","endLine":51,"endColumn":116,"suggestions":"142"},{"ruleId":"118","severity":1,"message":"139","line":52,"column":92,"nodeType":"120","endLine":52,"endColumn":122,"suggestions":"143"},{"ruleId":"118","severity":1,"message":"139","line":53,"column":98,"nodeType":"120","endLine":53,"endColumn":128,"suggestions":"144"},{"ruleId":"118","severity":1,"message":"139","line":15,"column":97,"nodeType":"120","endLine":15,"endColumn":130,"suggestions":"145"},{"ruleId":"118","severity":1,"message":"139","line":20,"column":8,"nodeType":"120","endLine":20,"endColumn":41,"suggestions":"146"},{"ruleId":"118","severity":1,"message":"139","line":24,"column":8,"nodeType":"120","endLine":24,"endColumn":41,"suggestions":"147"},"@typescript-eslint/no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","no-native-reassign",["148"],"no-negated-in-lhs",["149"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","noTargetBlank",{"range":"150","text":"151"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["152"],"'v1' is defined but never used.","'setTodosAc' is defined but never used.","'TaskPriorities' is defined but never used.","'setAppErrorAC' is defined but never used.","'RequestStatusType' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'isLoggedIn'. Either include them or remove the dependency array.",["153"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["154"],["155"],["156"],["157"],["158"],["159"],["160"],"React Hook useEffect has missing dependencies: 'dispatch' and 'props.id'. Either include them or remove the dependency array.",["161"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["162"],["163"],["164"],["165"],["166"],["167"],["168"],["169"],"no-global-assign","no-unsafe-negation",[1933,1933]," rel=\"noreferrer\"",{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},{"desc":"170","fix":"174"},{"desc":"170","fix":"175"},{"desc":"170","fix":"176"},{"desc":"170","fix":"177"},{"desc":"170","fix":"178"},{"desc":"170","fix":"179"},{"desc":"170","fix":"180"},{"desc":"181","fix":"182"},{"desc":"183","fix":"184"},{"desc":"183","fix":"185"},{"desc":"183","fix":"186"},{"desc":"183","fix":"187"},{"desc":"183","fix":"188"},{"desc":"183","fix":"189"},{"desc":"183","fix":"190"},{"desc":"183","fix":"191"},"Update the dependencies array to be: [dispatch]",{"range":"192","text":"193"},"Update the dependencies array to be: [dispatch, isLoggedIn]",{"range":"194","text":"195"},{"range":"196","text":"193"},{"range":"197","text":"193"},{"range":"198","text":"193"},{"range":"199","text":"193"},{"range":"200","text":"193"},{"range":"201","text":"193"},{"range":"202","text":"193"},"Update the dependencies array to be: [dispatch, props.id]",{"range":"203","text":"204"},"Update the dependencies array to be: [props]",{"range":"205","text":"206"},{"range":"207","text":"206"},{"range":"208","text":"206"},{"range":"209","text":"206"},{"range":"210","text":"206"},{"range":"211","text":"206"},{"range":"212","text":"206"},{"range":"213","text":"206"},[1263,1265],"[dispatch]",[1139,1141],"[dispatch, isLoggedIn]",[1546,1548],[1692,1694],[1983,1985],[2267,2269],[2471,2473],[2669,2671],[2915,2917],[1449,1451],"[dispatch, props.id]",[1559,1584],"[props]",[1797,1834],[1924,1954],[2048,2078],[2178,2208],[765,798],[1071,1104],[1261,1294]]